<letter> ::= "a" | ... | "z" | "A" | ... | "Z"
<digit> ::= "0" | ... | "9"
<sign> ::= "+" | "-"
<quot> ::= "\""

<id> ::= <id_quant> {<id_quant>}
    <id_quant> ::= <letter> | "_"

<const> ::= <const_int> | <const_float> | <const_bool> | <const_str>
    <const_int> ::= [<sign>] <digit> {<digit>}
    <const_float> ::= [<sign>] {<digit>} "." {<digit>}
    <const_bool> ::= "true" | "false"
    <const_str> ::= <quot> {<str_quant>} <quot>
        <str_quant> ::= any_ASCII_character_except_quot

<expr> ::= (<lval> <oper_ret> <expr>) | (<lval> {<oper_noret> <lrval>}) | (<rval> {<oper_noret> <lrval>})
    <lrval> ::= <lval> | <rval>
        <lval> ::= <id>
        <rval> ::= <const> | ("(" <expr> ")") | (<oper_1> <lrval>)
    <oper_1> ::= "+" | "-" | "~"
    <oper_2_ret> ::= "="
    <oper_2_noret> ::= <op_arithm> | <op_logic> | <op_cmp>
        <op_arithm> ::= "+" | "-" | "*" | "/" | "%"
        <op_logic> ::= "+" | "*"
        <op_cmp> ::= "==" | "!=" | ">" | ">=" | "<" | "<="

<type> ::= "int" | "float" | "bool" | "str"

<statement> ::= <scope> | (<declare> ";") | (<assign> ";") | <if> | <for> | <while> | <until> | <break> | <continue> | <input> | <output>
    <declare> ::= <type> <decl_id> {"," <decl_id>}
        <decl_id> ::= <id> ["=" <expr>]
    <assign> ::= <id> <oper_ret> <expr> ["," <assign>]
    <if> ::= "if" "(" <expr> ")" <statement> ["else" <statement>]
    <for> ::= "for" "(" [<for_init>] ";" [<expr>] ";" [<assign>] ")" <statement>
        <for_init> ::= <declare> | <assign>
    <while> ::= "while" "(" <expr> ")" <statement>
    <until> ::= "do" <statement> "until" "(" <expr> ")" ";"
    <break> ::= "break" ";"
    <continue> ::= "continue" ";"
    <input> ::= "input" <id> ";"
    <output> ::= "output" <expr> {"," <expr>} ";"

<scope> ::= "{" {<statement>} "}"

<program> ::= "program" <scope>
