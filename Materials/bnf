<letter> ::= "a" | ... | "z" | "A" | ... | "Z"
<digit> ::= "0" | ... | "9"
<sign> ::= "+" | "-"
<quot> ::= "\""

<id> ::= <id_quant> {<id_quant>}
    <id_quant> ::= <letter> | "_"

<const> ::= <const_int> | <const_float> | <const_bool> | <const_str>
    <const_int> ::= [<sign>] <digit> {<digit>}
    <const_float> ::= [<sign>] {<digit>} "." {<digit>}
    <const_bool> ::= "true" | "false"
    <const_str> ::= <quot> {<str_quant>} <quot>
        <str_quant> ::= any_ASCII_character_except_quot

<expr> ::= (<id> [<operator> <expr>]) | (<const> [<operator_noret> <expr>]) | ("(" <expr> ")")
    <operator> ::= <operator_noret> | <operator_ret>
        <operator_noret> ::= <op_arithm> | <op_logic> | <op_cmp>
            <op_arithm> ::= "+" | "-" | "*" | "/" | "%"
            <op_logic> ::= "+" | "*" | "~"
            <op_cmp> ::= "==" | "!=" | ">" | ">=" | "<" | "<="
        <operator_ret> ::= <op_assign>
            <op_assign> ::= "="

<type> ::= "int" | "float" | "bool" | "str"

<statement> ::= <scope> | <declaration> | <assign> | <if> | <for> | <while> | <until> | <break> | <continue> | <read> | <write>
    <declaration> ::= <type> <decl_id> {"," <decl_id>} ";"
        <decl_id> ::= <id> ["=" <expr>]
    <assign> ::= <id> <operator_ret> <expr> ";"
    <if> ::= "if" "(" <expr> ")" <statement> ["else" <statement>]
    <for> ::= "for" "(" [[<type>] <expr>] ";" [<expr>] ";" [<id> <operator_ret> <expr>] ")" <statement>
    <while> ::= "while" "(" <expr> ")" <statement>
    <until> ::= "do" <statement> "until" "(" <expr> ")" ";"
    <break> ::= "break" ";"
    <continue> ::= "continue" ";"
    <read> ::= "read" <id> ";"
    <write> ::= "write" <expr> {"," <expr>} ";"

<scope> ::= "{" {<statement>} "}"

<program> ::= "program" <scope>
